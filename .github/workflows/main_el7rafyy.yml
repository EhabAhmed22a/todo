# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - el7rafyy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Publish with detailed logging
        run: dotnet publish -c Release -o ./publish --verbosity detailed

      # FIXED DEBUG STEPS FOR WINDOWS
      - name: Analyze publish output
        run: |
          echo "=== PUBLISH OUTPUT ANALYSIS ==="
          echo "Total files:"
          (Get-ChildItem -Path ./publish -Recurse -File).Count
          echo "Total size (MB):"
          [math]::Round((Get-ChildItem -Path ./publish -Recurse -File | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
          echo "Top 10 largest files:"
          Get-ChildItem -Path ./publish -Recurse -File | Sort-Object Length -Descending | Select-Object -First 10 | Format-Table Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length / 1MB, 2)}} -AutoSize
          echo "DLL files:"
          Get-ChildItem -Path ./publish -Filter "*.dll" -Recurse | Select-Object -First 10 | Format-Table Name, Length -AutoSize
          echo "EXE files:"
          Get-ChildItem -Path ./publish -Filter "*.exe" -Recurse | Select-Object -First 10 | Format-Table Name, Length -AutoSize
          echo "Config files:"
          Get-ChildItem -Path ./publish -Filter "*.json" -Recurse | Select-Object -First 10
          Get-ChildItem -Path ./publish -Filter "*.config" -Recurse | Select-Object -First 10

      - name: Check for essential files
        run: |
          echo "=== ESSENTIAL FILES CHECK ==="
          $dllFiles = Get-ChildItem -Path ./publish -Filter "*.dll" -Recurse
          $runtimeConfig = Get-ChildItem -Path ./publish -Filter "*.runtimeconfig.json" -Recurse
          $appSettings = Get-ChildItem -Path ./publish -Filter "appsettings.json" -Recurse
          $webConfig = Get-ChildItem -Path ./publish -Filter "web.config" -Recurse
          
          if ($dllFiles) { echo "✓ DLL found: $($dllFiles.Count) files" } else { echo "✗ No DLL found" }
          if ($runtimeConfig) { echo "✓ Runtime config found: $($runtimeConfig.Name)" } else { echo "✗ No runtime config" }
          if ($appSettings) { echo "✓ appsettings.json found" } else { echo "✗ No appsettings.json" }
          if ($webConfig) { echo "✓ web.config found" } else { echo "✗ No web.config" }
          
          echo "Main DLL files:"
          $dllFiles | Where-Object { $_.Name -like "*TodoApi*" -or $_.Name -like "*YourProjectName*" } | Format-Table Name, Length -AutoSize

      - name: Create deployment package
        run: |
          echo "Creating zip from publish folder..."
          Compress-Archive -Path "./publish/*" -DestinationPath "./deployment.zip" -Force
          echo "Zip created:"
          Get-Item "./deployment.zip" | Format-Table Name, Length -AutoSize
          echo "Zip contents (first 20 files):"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zip = [System.IO.Compression.ZipFile]::OpenRead("$(Get-Location)/deployment.zip")
          $zip.Entries | Select-Object -First 20 | Format-Table FullName, CompressedLength, Length -AutoSize
          $zip.Dispose()

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-app
          path: deployment.zip
          




